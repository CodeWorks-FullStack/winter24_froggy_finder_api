


namespace froggy_finder_api.Repositories;

// NOTE all logic dealing with our database should be handled by the repository layer
public class FrogsRepository
{
  public FrogsRepository(IDbConnection db)
  {
    _db = db;
  }

  private readonly IDbConnection _db; // dbContext


  public List<Frog> GetAllFrogs()
  {
    string sql = "SELECT * FROM frogs;";

    // NOTE query is a dapper method, dapper is the ORM we are using in our dotnet webapi
    // Dapper takes in a type argument (Frog) which is what each row of data from our SQL statement will be cast into
    // Dapper executes our string of SQL (1st argument) on our database
    // We use to the ToList method to convert the IEnumerable into a List
    List<Frog> frogs = _db.Query<Frog>(sql).ToList();
    return frogs;
  }

  public Frog GetFrogById(int frogId)
  {
    // NOTE string interpolation is very very VERY bad for sql statements
    // string sql = $"SELECT * FROM frogs WHERE id = {frogId};";

    // NOTE Dapper can insert values into your string of sql and sanitize them. The '@ sign' signifies which property to access in our object and parameterize
    string sql = "SELECT * FROM frogs WHERE id = @frogId;";

    // new {} creates a generic object that dapper can pull values out of 
    // SingleOrDefault will return the first value out of the IEnumerable generated by Dapper, null if there are no values in the IEnumerable, or throw an error if the IEnumerable has multiple values
    //                                   {frogId: 3}
    Frog frog = _db.Query<Frog>(sql, new { frogId = frogId }).SingleOrDefault();
    return frog;
  }

  internal Frog CreateFrog(Frog frogData)
  {
    // frogData has multiple has multiple key:value pairs that we can parameterize into our SQL string 
    // we run two SQL commands here. The first statement creates the row, and the second statement selects the newly created row
    string sql = @"INSERT INTO 
                  frogs(species, name, size, is_poisonous, bio)
                  VALUES(@Species, @Name, @Size, @IsPoisonous, @Bio);
                  
                  SELECT * FROM frogs WHERE id = LAST_INSERT_ID();";

    Frog frog = _db.Query<Frog>(sql, frogData).SingleOrDefault();

    return frog;

  }

  public void DeleteFrog(int frogId)
  {
    string sql = "DELETE FROM frogs WHERE id = @frogId LIMIT 1;";

    // Execute runs our SQL command and returns how many were affected
    //                                      {frogId: 3}
    int rowsAffected = _db.Execute(sql, new { frogId });

    if (rowsAffected == 0) throw new Exception("No rows were deleted!");
    if (rowsAffected > 1) throw new Exception($"{rowsAffected} rows were deleted!");
  }
}